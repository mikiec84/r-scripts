You cannot obtain a pointer to member to a type member:
The subexpression will only be valid when is a non-type member of . But what you need to check is whether it is a type. A minimal change to your template could be:
If is a nested type of , then that function overload will be a valid candidate (the 0 will be a pointer to whatever type is), but if does not contain a nested then it will be discarded and the second test will be the only candidate.
There is a different question as of whether the trait is needed at all, since if you use in the target template, the template will be discarded automatically for types that don't have that nested type.

